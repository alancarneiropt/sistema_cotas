# Generated by Django 4.2.21 on 2025-10-06 09:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_id', models.CharField(blank=True, max_length=120, verbose_name='ID do Administrador')),
                ('action', models.CharField(max_length=120, verbose_name='Ação')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Detalhes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Log Administrativo',
                'verbose_name_plural': 'Logs Administrativos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Nome do produto/sorteio', max_length=180, verbose_name='Título')),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada do produto', verbose_name='Descrição')),
                ('price_cents', models.PositiveIntegerField(help_text='Preço por cota em centavos (BRL). Ex: 1000 = R$ 10,00', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Preço por cota (centavos)')),
                ('total_quotas', models.PositiveIntegerField(help_text='Número total de cotas disponíveis', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Total de cotas')),
                ('draw_datetime', models.DateTimeField(blank=True, help_text='Quando será realizado o sorteio', null=True, verbose_name='Data e hora do sorteio')),
                ('status', models.CharField(choices=[('rascunho', 'Rascunho'), ('ativo', 'Ativo'), ('encerrado', 'Encerrado')], default='rascunho', max_length=20, verbose_name='Status')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Imagem do produto')),
                ('drawn_number', models.PositiveIntegerField(blank=True, help_text='Número da cota sorteada', null=True, verbose_name='Número sorteado')),
                ('draw_source', models.CharField(blank=True, help_text='Descrição de como foi realizado o sorteio', max_length=255, verbose_name='Fonte do sorteio')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Produto',
                'verbose_name_plural': 'Produtos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=180, verbose_name='Nome completo')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('whatsapp', models.CharField(blank=True, help_text='Formatos +55..., +351..., etc.', max_length=30, verbose_name='WhatsApp')),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantidade de cotas')),
                ('total_price_cents', models.PositiveIntegerField(verbose_name='Valor total (centavos)')),
                ('status', models.CharField(choices=[('reservado', 'Reservado'), ('aguardando_comprovante', 'Aguardando comprovante'), ('aguardando_confirmacao', 'Aguardando confirmação'), ('confirmado', 'Confirmado'), ('cancelado', 'Cancelado'), ('expirado', 'Expirado')], default='reservado', max_length=30, verbose_name='Status')),
                ('receipt', models.FileField(blank=True, null=True, upload_to='receipts/', verbose_name='Comprovante de pagamento')),
                ('reserve_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Reserva expira em')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='raffles.product', verbose_name='Produto')),
            ],
            options={
                'verbose_name': 'Pedido',
                'verbose_name_plural': 'Pedidos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Quota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='Número da cota')),
                ('status', models.CharField(choices=[('disponivel', 'Disponível'), ('reservada', 'Reservada'), ('vendida', 'Vendida')], default='disponivel', max_length=20, verbose_name='Status')),
                ('reserved_until', models.DateTimeField(blank=True, null=True, verbose_name='Reservada até')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='raffles.order', verbose_name='Pedido')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='raffles.product', verbose_name='Produto')),
            ],
            options={
                'verbose_name': 'Cota',
                'verbose_name_plural': 'Cotas',
                'ordering': ['product', 'number'],
                'unique_together': {('product', 'number')},
            },
        ),
    ]
